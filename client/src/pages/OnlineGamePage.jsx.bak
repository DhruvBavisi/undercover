import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { useGameRoom } from '../context/GameRoomContext';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '../components/ui/card';
import { Loader2, ArrowLeft, Users, MessageCircle, Clock, AlertCircle, Send, ThumbsUp, Check, X, Award, Crown, Skull, RefreshCcw, Pause } from 'lucide-react';
import { useToast } from '../hooks/use-toast';
import { Alert, AlertDescription } from '../components/ui/alert';
import { Input } from '../components/ui/input';
import { Textarea } from '../components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '../components/ui/dialog';
import { API_URL } from '../config';
import Starfield from "../components/Starfield";

const OnlineGamePage = () => {
  const { gameCode } = useParams();
  const navigate = useNavigate();
  const { isAuthenticated, user, token } = useAuth();
  const {
    room,
    loading,
    error,
    playerRole,
    playerWord,
    gamePhase,
    currentRound,
    votes,
    eliminatedPlayer,
    winner,
    scores,
    readyPlayers,
    fetchRoom,
    toggleReady,
    startGame,
    submitWordDescription,
    submitVote,
    submitWordGuess,
    leave,
    isHost,
    isPlayerReady,
    areAllPlayersReady
  } = useGameRoom();
  const { toast } = useToast();
  
  // State
  const [timeLeft, setTimeLeft] = useState(0);
  const [currentTurn, setCurrentTurn] = useState(null);
  const [initialFetchDone, setInitialFetchDone] = useState(false);
  const [isStable, setIsStable] = useState(false);
  const [chatMessage, setChatMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [showVotingDialog, setShowVotingDialog] = useState(false);
  const [selectedPlayer, setSelectedPlayer] = useState(null);
  const [votingResults, setVotingResults] = useState(null);
  const [gameWinner, setGameWinner] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showMrWhiteDialog, setShowMrWhiteDialog] = useState(false);
  const [wordGuess, setWordGuess] = useState('');
  const [guessResult, setGuessResult] = useState(null);
  const [isGuessing, setIsGuessing] = useState(false);
  const [description, setDescription] = useState('');
  const [showWordGuessDialog, setShowWordGuessDialog] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [showQuitConfirm, setShowQuitConfirm] = useState(false);
  const [showAddPlayerConfirm, setShowAddPlayerConfirm] = useState(false);
  const [speakingOrder, setSpeakingOrder] = useState([]);
  const [usedDescriptions, setUsedDescriptions] = useState(new Set());
  const [descriptionError, setDescriptionError] = useState('');
  const [localCurrentRound, setLocalCurrentRound] = useState(1);
  const [localGamePhase, setLocalGamePhase] = useState('waiting');
  
  // Refs
  const timerIntervalRef = useRef(null);
  const stabilityTimeoutRef = useRef(null);
  const messagesEndRef = useRef(null);
  const chatInputRef = useRef(null);
  const descriptionInputRef = useRef(null);
  const chatEndRef = useRef(null);

  // Redirect to login if not authenticated
  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/login');
    }
  }, [isAuthenticated, navigate]);

  // Redirect to GamePage if game is in waiting phase
  useEffect(() => {
    if (room && room.status === 'waiting') {
      navigate(`/game/${gameCode}`);
    }
  }, [room, gameCode, navigate]);

  // Fetch room details when component mounts
  const fetchGameRoom = useCallback(async () => {
    if (!isAuthenticated || !gameCode) return;
    
    console.log(`OnlineGamePage: Fetching room with code ${gameCode}`);
    await fetchRoom(gameCode);
    setInitialFetchDone(true);
  }, [isAuthenticated, gameCode, fetchRoom]);
  
  // Initial fetch on mount
  useEffect(() => {
    fetchGameRoom();
  }, [fetchGameRoom]);

  // Initialize game state from room data
  useEffect(() => {
    if (room && initialFetchDone) {
      console.log('Initializing game state from room data');
      
      // Set current round
      if (room.currentRound) {
        setLocalCurrentRound(room.currentRound);
      }
      
      // Set game phase
      if (room.currentPhase) {
        setLocalGamePhase(room.currentPhase);
      }
      
      // Initialize speaking order
      if (room.rounds && room.rounds.length > 0 && room.currentRound) {
        const roundIndex = room.currentRound - 1;
        const currentRound = room.rounds[roundIndex];
        if (currentRound && currentRound.speakingOrder && currentRound.speakingOrder.length > 0) {
